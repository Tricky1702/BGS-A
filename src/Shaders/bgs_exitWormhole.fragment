uniform sampler2D colorMap;
uniform float fTime;
varying vec2 vTexCoord;
const vec3 chroma = vec3(-0.6,-0.2,0.8);

vec3 textureDistorted(in sampler2D tex,in vec2 sample_center,in vec2 sample_vector,in vec3 distortion)
{
	return vec3(
		texture2D(tex, sample_center + sample_vector * distortion.r).r,
		texture2D(tex, sample_center + sample_vector * distortion.g).g,
		texture2D(tex, sample_center + sample_vector * distortion.b).b
	);
}
void main()
{
	// multiplied time is used for texture distortion and shrinking of rendered area
	float t = fTime*0.02;
	vec2 image_center = vec2(0.5);
	vec2 sample_vector = (image_center - vTexCoord) * t;
	vec2 halo_vector = normalize(sample_vector) * t;
	vec3 result = textureDistorted(colorMap, vTexCoord + halo_vector, halo_vector, chroma.xyz).rgb;
	for (int i = 0; i < 3; ++i) {
		vec2 offset = sample_vector * float(i);
		result += texture2D(colorMap, vTexCoord + offset).rgb;
	}
	float dist = distance(vTexCoord, vec2(0.5));
	// 0.48 is roughly a sphere
	result *= smoothstep(clamp(0.48-t,0.0,0.48), -0.04, dist);
	if(result.b<0.15) discard;
	gl_FragColor = vec4(result,1.0);
}
